generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
}

enum SaleStatus {
  PENDING
  CONCLUDED
  CANCELLED
}

model user {
  id              Int       @id @default(autoincrement())
  name            String
  password        String
  phone           String
  role            Role?     @default(USER)
  email           String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  active          Status?   @default(ACTIVE)
  products        product[] @relation("createdByUser")
  productsUpdated product[] @relation("updatedByUser")
  
  // Sales made by the user (as the seller)
  sales           sale[]    @relation("sellerSales")
}

model product {
  id            String    @id @db.Uuid @default(uuid())
  name          String
  barCode       String
  price         Float
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  active        Status    @default(ACTIVE)
  createdBy     Int
  updatedBy     Int
  createdByUser user?     @relation("createdByUser", fields: [createdBy], references: [id])
  updatedByUser user?     @relation("updatedByUser", fields: [updatedBy], references: [id])
  sales        saleProduct[]
  // Index for searching products by bar code
  @@index([barCode])
}

model sale {
  id             String      @id @db.Uuid @default(uuid())
  // The seller who made the sale
  sellerId       Int
  seller         user        @relation("sellerSales", fields: [sellerId], references: [id])
  
  paymentMethod  PaymentMethod
  total          Float       // Total of the sale
  amountReceived Float       // Amount received from the customer
  change         Float       // Change to give back to the customer
  saleDate       DateTime    @default(now()) // Date and time of the sale
  status         SaleStatus  @default(PENDING)
  
  // List of products included in this sale
  saleProducts      saleProduct[]
}

model saleProduct {
  id         String   @id @db.Uuid @default(uuid())
  saleId     String   @db.Uuid
  sale       sale     @relation(fields: [saleId], references: [id])
  
  productId  String   @db.Uuid
  product    product  @relation(fields: [productId], references: [id])
  
  quantity   Int      // Quantity of this product in the sale
}
